{"version":3,"sources":["Styles.js","PointsCard.js","QACard.js","Title.js","Game.js","index.js"],"names":["styles","theme","root","flexGrow","backgroundColor","boardZone","textAlign","color","palette","text","primary","fontSize","display","gridGap","gridTemplateRows","justifyItems","teamBoardZone","secondary","gridTemplateColumns","titleCardZone","paddingTop","paddingBottom","qaCard","width","minHeight","paddingLeft","paddingRight","spacing","btnZone","hintZone","hintBtnZone","marginLeft","marginRight","hintBtn","answerBtnZone","goBackBtn","goBackBtnZone","alignItems","justifyContent","teamPtsBtnZone","teamPtsBtn","verticalCenter","flexDirection","pointsCard","whiteSpace","marginBottom","card0","card1","card2","card3","card4","cardAns0","cardAns1","cardAns2","cardAns3","cardAns4","greyedOut","PointsCard","classes","this","props","className","answered","col","Math","floor","setCurrState","row","Paper","clsx","getColourClass","wrap","onClick","React","Component","withStyles","QACard","setWrapperRef","bind","handleClickOutside","document","addEventListener","removeEventListener","node","wrapperRef","event","contains","target","colourNum","currState","hint","hintNum","btns","hint1btn","getHintBtn","hint1","hint2btn","hint2","hint3btn","hint3","Grid","container","item","setAnswered","addPoints","pts","category","ref","fontFam","fontFamily","createMuiTheme","typography","h1","h2","h3","h4","h5","responsiveFontSizes","Title","headingSize","titleType","ThemeProvider","Typography","variant","align","Game","addPointsManually","state","categories","cardsAnswered","currCardInd","currHint","team1pts","team2pts","csv","newState","setState","changeToFalse","newCardsAnswered","slice","teamNum","prevPts","getPoints","console","error","window","addpts","e","file","files","reader","FileReader","readAsText","onload","csvData","result","readInfo","resetCardsAnswered","onerror","alert","fileName","cards","numCategories","length","push","key","jsonCsv","Papa","parse","header","data","forEach","num","parseInt","i","keyid","CardRow","currRow","rowAnswered","style","marginTop","mainText","getHint","currGameBoard","extraRootStyle","isQAH","createGameBoard","getQuestion","getAnswer","createQACard","href","type","name","accept","onChange","handleCSVUpload","direction","justify","card","xs","Box","mb","Fragment","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f04d30e8.chunk.js","sourcesContent":["function styles(theme) {\n    return ({\n        root: {\n            flexGrow: 1,\n            backgroundColor: 'white',\n        },\n        boardZone: {\n            textAlign: 'center',\n            color: theme.palette.text.primary,\n            fontSize: '4vh',\n            // grid layout:\n            display: 'grid',\n            gridGap: '2vh',\n            gridTemplateRows: '10fr 1fr',\n            justifyItems: 'center',\n        },\n        teamBoardZone: {\n            textAlign: 'center',\n            color: theme.palette.text.secondary,\n            fontSize: '3vh',\n            // grid layout:\n            display: 'grid',\n            gridGap: '20vw',\n            gridTemplateColumns: '1fr 1fr',\n            justifyItems: 'center',\n        },\n        titleCardZone: {\n            textAlign: 'center',\n            color: theme.palette.text.secondary,\n            fontSize: '6vh',\n            // grid layout:\n            display: 'grid',\n            gridGap: '2vh',\n            gridTemplateRows: '1fr 10fr',\n            justifyItems: 'center',\n            paddingTop: '0vh',\n            paddingBottom: '3vh',\n        },\n        qaCard: {\n            width: '50vw',\n            minHeight: '50vh',\n            paddingTop: '5vh',\n            paddingBottom: '5vh',\n            paddingLeft: '10vw',\n            paddingRight: '10vw',\n            textAlign: 'center',\n            color: theme.palette.text.primary,\n            fontSize: '7vh',\n            // grid layout:\n            display: 'grid',\n            gridGap: theme.spacing(3),\n            gridTemplateRows: '4fr 1fr',\n        },\n        btnZone: {\n            // grid layout:\n            display: 'grid',\n            gridGap: '15vw',\n            gridTemplateColumns: '1fr 1fr',\n        },\n        hintZone: {\n            minHeight: '10vh',\n            color: theme.palette.text.secondary,\n            fontSize: '3vh',\n            paddingTop: '1vh',\n            paddingBottom: '2vh',\n            // grid layout:\n            display: 'grid',\n            gridTemplateRows: '1fr 1fr',\n            gridGap: '1vh',\n        },\n        hintBtnZone: {\n            fontSize: '2vh',\n            marginLeft: '2vw',\n            marginRight: '2vw',\n            // grid layout:\n            display: 'grid',\n            gridTemplateColumns: '1fr 1fr 1fr',\n            gridGap: '2vw',\n        },\n        hintBtn: {\n            backgroundColor: '#f5f5f5'\n        },\n        answerBtnZone: {\n            fontSize: '4vh',\n            color: theme.palette.text.primary,\n        },\n        goBackBtn: {\n            width: '20vw',\n            paddingTop: '1vh',\n            paddingBottom: '1vh',\n            paddingLeft: '2vw',\n            paddingRight: '2vw',\n        },\n        goBackBtnZone: {\n            fontSize: '4vh',\n            color: theme.palette.text.primary,\n            textAlign: 'center',\n            // grid layout:\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n        },\n        teamPtsBtnZone: {\n            fontSize: '4vh',\n            color: theme.palette.text.primary,\n            // grid layout:\n            display: 'grid',\n            gridGap: '5vw',\n            gridTemplateColumns: '1fr 1fr',\n        },\n        teamPtsBtn: {\n            paddingTop: '2vh',\n            paddingBottom: '2vh',\n            paddingLeft: '2vw',\n            paddingRight: '2vw',\n        },\n        verticalCenter: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n        },\n        pointsCard: {\n            paddingTop: '4vh',\n            paddingBottom: '4vh',\n            textAlign: 'center',\n            color: theme.palette.text.secondary,\n            whiteSpace: 'nowrap',\n            marginBottom: '1.5vh',\n            marginRight: '1.5vh',\n            marginLeft: '1.5vh',\n            fontSize: '3vh',\n        },\n        card0: {\n            backgroundColor: '#ffe3e4',\n        },\n        card1: {\n            backgroundColor: '#fffae3',\n        },\n        card2: {\n            backgroundColor: '#f0ffe3',\n        },\n        card3: {\n            backgroundColor: '#dfffef',\n        },\n        card4: {\n            backgroundColor: '#dffcff',\n        },\n        cardAns0: {\n            backgroundColor: '#fff2f3',\n        },\n        cardAns1: {\n            backgroundColor: '#fffdf2',\n        },\n        cardAns2: {\n            backgroundColor: '#f5fdef',\n        },\n        cardAns3: {\n            backgroundColor: '#edfef5',\n        },\n        cardAns4: {\n            backgroundColor: '#eafafc',\n        },\n        greyedOut: {\n            backgroundColor: 'darkgrey',\n        },\n    });\n}\n\nexport default styles;","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport styles from './Styles';\nimport clsx from 'clsx';\n\nclass PointsCard extends React.Component {\n    getColourClass() {\n        const { classes } = this.props;\n        let className = '';\n        if (this.props.answered) {\n            // the card should be greyed out\n            className = 'greyedOut';\n        } else {\n            // the card hasn't been answered yet, so it should be coloured.\n            // get a number between 0 & 4 based on the column:\n            const colourNum = this.props.col - 5 * Math.floor(this.props.col / 5);\n            className = ('card' + colourNum);\n        }\n        return classes[className];\n    }\n    render() {\n        const { classes, setCurrState, row, col } = this.props;\n        return (\n            <Paper\n                className={clsx(classes.pointsCard, this.getColourClass())}\n                wrap=\"nowrap\"\n                onClick={function () {\n                    setCurrState('question', null, { row: row, col: col });\n                }}\n            >\n                {this.props.text}\n            </Paper>\n        );\n    }\n}\n\nexport default withStyles((theme) => styles(theme))(PointsCard);\n","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport styles from './Styles';\nimport clsx from 'clsx';\nimport Grid from '@material-ui/core/Grid';\n\nclass QACard extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // Set wrapper ref for the 'outside div' click handler\n        this.setWrapperRef = this.setWrapperRef.bind(this);\n        this.handleClickOutside = this.handleClickOutside.bind(this);\n    }\n\n    componentDidMount() {\n        document.addEventListener('mouseup', this.handleClickOutside);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('mouseup', this.handleClickOutside);\n    }\n\n    /**\n     * Set the wrapper ref for the 'outside this div' click handler. This allows\n     * the handler to check if the div with ref is contained within the div that's \n     * clicked or not.\n     */\n    setWrapperRef(node) {\n        this.wrapperRef = node;\n    }\n\n    /**\n     * Handle clicks that are outside the card by routing back to the main game\n     * board page.\n     */\n    handleClickOutside(event) {\n        if (this.wrapperRef && !this.wrapperRef.contains(event.target)) {\n            this.props.setCurrState('board');\n        }\n    }\n\n    getColourClass() {\n        const { classes } = this.props;\n        // get a number between 0 & 4 based on the column:\n        const colourNum = this.props.col - 5 * Math.floor(this.props.col / 5);\n        // if in answer state, the colour will be slightly lighter\n        let classCode = '';\n        if (this.props.currState === 'answer') {\n            classCode = ('cardAns' + colourNum);\n        } else {\n            classCode = ('card' + colourNum);\n        }\n        return classes[classCode];\n    }\n\n    getHintBtn(hint, hintNum) {\n        const { classes } = this.props;\n        let hintBtn = // default (no hint) is greyed out:\n            (<Paper className={clsx(classes.verticalCenter, classes.hintBtn, classes.greyedOut)}>\n                {hintNum}\n            </Paper>);\n        if (hint) {\n            hintBtn = // there is a hint, so add an onclick etc:\n                (<Paper\n                    className={clsx(classes.verticalCenter, classes.hintBtn)}\n                    onClick={() => (this.props.setCurrState('hint', hint))}>\n                    {hintNum}\n                </Paper>);\n        }\n        return hintBtn;\n    }\n\n    render() {\n        const { classes } = this.props;\n        let btns;\n        switch (this.props.currState) {\n            case 'question':\n                let hint1btn = this.getHintBtn(this.props.hint1, 1);\n                let hint2btn = this.getHintBtn(this.props.hint2, 2);\n                let hint3btn = this.getHintBtn(this.props.hint3, 3);\n                btns = (\n                    <Grid container className={classes.btnZone}>\n                        <Grid item >\n                            <Paper>\n                                <Grid container className={classes.hintZone}>\n                                    <Grid item className={classes.verticalCenter}>\n                                        Hints\n                                    </Grid>\n                                    <Grid item className={classes.hintBtnZone}>\n                                        {hint1btn}\n                                        {hint2btn}\n                                        {hint3btn}\n                                    </Grid>\n                                </Grid>\n                            </Paper>\n                        </Grid>\n                        <Paper\n                            className={clsx(classes.verticalCenter, classes.answerBtnZone)}\n                            onClick={() => (this.props.setCurrState('answer'))}>\n                            Answer\n                        </Paper>\n                    </Grid>);\n                break;\n            case 'hint':\n                btns = (\n                    <div className={classes.goBackBtnZone}>\n                        <Paper\n                            className={clsx(classes.verticalCenter, classes.goBackBtn)}\n                            onClick={() => (this.props.setCurrState('question'))}>\n                            Go Back\n                            </Paper>\n                    </div>\n                );\n                break;\n            case 'answer':\n                btns = (\n                    <Grid container className={classes.teamPtsBtnZone}>\n                        <Paper\n                            className={clsx(classes.verticalCenter, classes.teamPtsBtn)}\n                            onClick={() => {\n                                this.props.setAnswered();\n                                this.props.addPoints(1);\n                                this.props.setCurrState('board');\n                            }}>\n                            {this.props.pts} for Team 1\n                        </Paper>\n                        <Paper\n                            className={clsx(classes.verticalCenter, classes.teamPtsBtn)}\n                            onClick={() => {\n                                this.props.setAnswered();\n                                this.props.addPoints(2);\n                                this.props.setCurrState('board');\n                            }}>\n                            {this.props.pts} for Team 2\n                        </Paper>\n                    </Grid >\n                );\n                break;\n            default:\n                btns = (<div>That's strange! The system reached an unknown state...\n                    Try refreshing.</div>);\n        }\n\n        return (\n            <Grid container className={classes.titleCardZone}>\n                <Grid item>\n                    {this.props.category + ': ' + this.props.pts}\n                </Grid>\n                <div ref={this.setWrapperRef}>\n                    <Paper className={clsx(classes.qaCard, this.getColourClass())} >\n                        <Grid item className={classes.verticalCenter}>\n                            {this.props.text}\n                        </Grid>\n                        <Grid item>\n                            {btns}\n                        </Grid>\n                    </Paper>\n                </div>\n            </Grid>\n        );\n    }\n}\n\nexport default withStyles((theme) => styles(theme))(QACard);\n","import React from 'react';\nimport {\n    withStyles\n} from '@material-ui/core/styles';\nimport styles from './Styles';\nimport { createMuiTheme, responsiveFontSizes, ThemeProvider } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\n\nconst fontFam = {\n    fontFamily: ['-apple-system', 'BlinkMacSystemFont', 'Segoe UI', 'Roboto', 'Oxygen',\n        'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', 'sans-serif'],\n};\nlet theme = createMuiTheme({\n    typography: {\n        h1: fontFam,\n        h2: fontFam,\n        h3: fontFam,\n        h4: fontFam,\n        h5: fontFam,\n    },\n});\ntheme = responsiveFontSizes(theme);\n\nclass Title extends React.Component {\n    render() {\n        let headingSize = 'h1';\n        switch (this.props.titleType) {\n            case 'category':\n                headingSize = 'h4';\n                break;\n            case 'title':\n                headingSize = 'h1';\n                break;\n            default:\n        }\n        const title = (<ThemeProvider theme={theme}>\n            <Typography variant={headingSize} align=\"center\"><div className=\"title\">{this.props.text}</div></Typography>\n        </ThemeProvider>);\n        return title;\n\n    }\n}\n\nexport default withStyles((theme) => styles(theme))(Title);","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport styles from './Styles';\nimport PointsCard from './PointsCard';\nimport QACard from './QACard';\nimport Title from './Title';\nimport Box from '@material-ui/core/Box';\nimport Papa from 'papaparse';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.setCurrState = this.setCurrState.bind(this);\n    this.addPointsManually = this.addPointsManually.bind(this);\n    this.state = {\n      currState: 'board', // board, question, hint, answer\n      categories: null,\n      cardsAnswered: null, // array of true/falses per card -> if true -> card greyed out\n      currCardInd: { col: null, row: null },\n      currHint: null,\n      team1pts: 0,\n      team2pts: 0,\n      csv: null,\n    };\n  }\n\n  /**\n   * Handler to set the Game state (i.e., whether the view shows the game board, a\n   * question, a hint, or an answer) from within a subcomponent (i.e., a QuestionCard).\n   * @param {*} state : string containing, 'board', 'question', 'hint', or 'answer'\n   */\n  setCurrState(state, hint, currCardInd) {\n    let newState = { currState: state };\n    if (hint) {\n      newState.currHint = hint;\n    }\n    if (currCardInd) {\n      newState.currCardInd = currCardInd;\n    }\n    this.setState(newState);\n  }\n\n  /**\n   * Sets cardsAnswered at the specified row and column to true (or false, if specified by\n   * changeToFalse=true). This causes the card to be 'greyed out', indicating it has been\n   * answered.\n   * @param {*} row \n   * @param {*} col \n   */\n  setAnswered(row, col, changeToFalse) {\n    let newCardsAnswered = this.state.cardsAnswered.slice(); // copy the array so that we don't mutate it\n    if (!changeToFalse) {\n      newCardsAnswered[row][col] = true;\n    } else {\n      newCardsAnswered[row][col] = false;\n    }\n    this.setState({ cardsAnswered: newCardsAnswered });\n  }\n\n  addPoints(teamNum, row) {\n    if (teamNum === 1) {\n      let prevPts = this.state.team1pts;\n      this.setState({ team1pts: (prevPts + Game.getPoints(row)) });\n    } else if (teamNum === 2) {\n      let prevPts = this.state.team2pts;\n      this.setState({ team2pts: (prevPts + Game.getPoints(row)) });\n    } else {\n      console.error('Unknown team number, ' + teamNum + '. Points weren\\'t added.');\n    }\n  }\n\n  componentDidMount() {\n    window.addpts = this.addPointsManually;\n  }\n\n  handleCSVUpload(e) {\n    var file = e.target.files[0];\n    var reader = new FileReader();\n    reader.readAsText(file);\n    reader.onload = (function (event) {\n      var csvData = event.target.result;\n      const cats = this.readInfo(csvData, 'c'); // c -> categories\n      const newState = { csv: csvData, categories: cats };\n      this.resetCardsAnswered(newState.csv);\n      this.setState(newState);\n    }).bind(this);\n    reader.onerror = function () {\n      alert('Unable to read ' + file.fileName +\n        '. Is it a CSV file? Is it in the format as outlined by the readme?');\n    };\n  }\n\n  resetCardsAnswered(csv) {\n    // set the states of all the cards to be 'unanswered'\n    // i.e., fill an array size of numCategories x 5 (since 500 points max) to falses\n    let cards = [];\n    let numCategories = this.readInfo(csv, 'c').length;\n    for (let row = 0; row < 5; row++) {\n      cards.push([]);\n      for (let col = 0; col < numCategories; col++) {\n        cards[row].push(false);\n      }\n    }\n    this.setState({ cardsAnswered: cards });\n  }\n\n  /**\n   * Function to read from a string CSV formated with column headers as follows:\n   * c, q0, h0, h0, h0, a0, q1, h1, h1, h1, a1, q2, etc., \n   * where c -> category; q -> question; h -> hint; a -> answer)\n   * See jeopardy_qa.template.csv for an example CSV file.\n   * @param {*} csv : A string of comma separated values\n   * @param {*} key : e.g., 'c' to read category, 'q1' to read the second question\n   */\n  readInfo(csv, key) {\n    const jsonCsv = Papa.parse(csv, {\n      header: true\n    });\n    let categories = [];\n    jsonCsv.data.forEach((row) => {\n      categories.push(row[key]);\n    });\n    return categories;\n  }\n\n  /**\n   * Reads the applicable question from the csv, given the row/column of the card.\n   */\n  getQuestion(row, col) {\n    return this.readInfo(this.state.csv, 'q' + row)[col];\n  }\n\n  /**\n   * Reads the applicable answer from the csv, given the row/column of the card.\n   */\n  getAnswer(row, col) {\n    return this.readInfo(this.state.csv, 'a' + row)[col];\n  }\n\n  /**\n   * Reads the applicable hint from the csv, given the row/column of the card\n   * and the hint number (1-3).\n   */\n  getHint(row, col, num) {\n    return this.readInfo(this.state.csv, 'h' + row + '_' + (parseInt(num) - 1))[col];;\n  }\n\n  /**\n   * Add bonus points manually from the console. \n   * @param {*} pts \n   * @param {*} teamNum \n   */\n  addPointsManually(pts, teamNum) {\n    if (teamNum === 1) {\n      let prevPts = this.state.team1pts;\n      this.setState({ team1pts: (prevPts + pts) });\n    } else if (teamNum === 2) {\n      let prevPts = this.state.team2pts;\n      this.setState({ team2pts: (prevPts + pts) });\n    } else {\n      console.error('Unknown team number, ' + teamNum + '. Points weren\\'t added.');\n    }\n  }\n\n  /**\n   * Calculates the number of points based on the row index of the card.\n   * @param {*} row : index of the row (0-4)\n   */\n  static getPoints(row) {\n    return (row + 1) * 100;\n  }\n\n  createGameBoard() {\n    const { classes } = this.props;\n    let gameBoard;\n    let cards = [];\n    for (let i = 0; i < 5; i++) {\n      let keyid = \"row\" + Game.getPoints(i);\n      cards[i] =\n        (<Grid container item key={keyid}>\n          <CardRow\n            categories={this.state.categories}\n            currRow={i}\n            rowAnswered={this.state.cardsAnswered[i]}\n            setCurrState={this.setCurrState}\n            key={keyid} />\n        </Grid>);\n    }\n    gameBoard = (<Grid container className={classes.boardZone}>\n      <Grid style={{ width: '80vw', marginTop: '2vh' }} item>\n        {cards}\n      </Grid>\n      <Grid item>\n        <Grid container className={classes.teamBoardZone}>\n          <Grid item>\n            Team 1: {this.state.team1pts} pts\n                </Grid>\n          <Grid item>\n            Team 2: {this.state.team2pts} pts\n                </Grid>\n        </Grid>\n      </Grid>\n    </Grid>);\n    return gameBoard;\n  }\n\n  createQACard(mainText) {\n    return (<QACard\n      text={mainText}\n      category={this.state.categories[this.state.currCardInd.col]}\n      pts={Game.getPoints(this.state.currCardInd.row)}\n      col={this.state.currCardInd.col}\n      currState={this.state.currState}\n      setCurrState={this.setCurrState}\n      setAnswered={() => this.setAnswered(this.state.currCardInd.row, this.state.currCardInd.col)}\n      addPoints={(teamNum) => this.addPoints(teamNum, this.state.currCardInd.row)}\n      // need hints a priori to render hint buttons correctly\n      hint1={this.getHint(this.state.currCardInd.row, this.state.currCardInd.col, 1)}\n      hint2={this.getHint(this.state.currCardInd.row, this.state.currCardInd.col, 2)}\n      hint3={this.getHint(this.state.currCardInd.row, this.state.currCardInd.col, 3)}\n      key={'question'}\n    />);\n  }\n\n  render() {\n    const { classes } = this.props;\n    let currGameBoard;\n    let extraRootStyle = {};\n    if (!this.state.categories) {\n      // render upload state:\n      currGameBoard = (\n        <div>\n          <p>\n            Upload a CSV file with questions and answers, as described by the \"custom jeopardy questions and answers section\" of the <span> </span>\n            <a href=\"https://github.com/jessvb/jeopardy/blob/static-upload-csv/README.md#custom-jeopardy-questions-and-answers\">readme</a> <span> </span>\n            and <a href=\"https://github.com/jessvb/jeopardy/blob/static-upload-csv/src/jeopardy_qa.template.csv\">shown in the example on GitHub</a>.\n          </p>\n          <div style={{ display: 'flex', justifyContent: 'center', }}>\n            <input type=\"file\" name=\"File Upload\" accept=\".csv\" onChange={(e) => { this.handleCSVUpload(e) }} />\n          </div>\n        </div>\n      );\n    } else {\n      let mainText = '';\n      let isQAH = false; // is question/answer/hint\n      switch (this.state.currState) {\n        case 'board':\n          extraRootStyle = {};\n          currGameBoard = this.createGameBoard();\n          break;\n        case 'question':\n          mainText = this.getQuestion(this.state.currCardInd.row, this.state.currCardInd.col);\n          isQAH = true;\n          break;\n        case 'hint':\n          mainText = this.state.currHint;\n          isQAH = true;\n          break;\n        case 'answer':\n          mainText = this.getAnswer(this.state.currCardInd.row, this.state.currCardInd.col);\n          isQAH = true;\n          break;\n        default:\n          currGameBoard = (<div>That's strange! The system reached an unknown state...\n            Try refreshing.</div>);\n      }\n      if (isQAH) {\n        extraRootStyle = { backgroundColor: '#f8f8f8' };\n        currGameBoard = this.createQACard(mainText);\n      }\n    }\n    return (\n      <div className={classes.root} style={extraRootStyle}>\n        <Grid container\n          spacing={0}\n          direction=\"column\"\n          alignItems=\"center\"\n          justify=\"center\"\n          style={{ minHeight: '100vh' }}\n        >{currGameBoard}\n        </Grid>\n      </div>\n    );\n  }\n}\n\nfunction CardRow(props) {\n  let cards = [];\n  let pts = Game.getPoints(props.currRow);\n  for (let col = 0; col < props.categories.length; col++) {\n    let keyid = \"col\" + col + \"-\" + pts;\n    let card =\n      (<PointsCard\n        text={pts}\n        col={col}\n        row={props.currRow}\n        answered={props.rowAnswered[col]}\n        setCurrState={props.setCurrState}\n        key={keyid}\n      />);\n    if (props.currRow !== 0) {\n      cards[col] =\n        (<Grid item xs key={keyid}>\n          {card}\n        </Grid>);\n    } else {\n      // If it's the first row, put category titles:\n      cards[col] =\n        (<Grid item xs key={keyid}>\n          <Box mb={2}>\n            <Title text={props.categories[col]} titleType='category' />\n          </Box>\n          {card}\n        </Grid>);\n    }\n  }\n  return (\n    <React.Fragment>\n      {cards}\n    </React.Fragment>\n  );\n}\n\nexport default withStyles(styles)(Game);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './Game';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}